# -*- coding: utf-8 -*-
# vim: ft=jinja
{## Start with  defaults from defaults.sls ##}
{% import_yaml 'logstash/defaults.yaml' as default_settings %}
{%- import_yaml 'logstash/versions.yaml' as version_map %}
{##
Setup variable using grains['os_family'] based logic, only add key:values here
that differ from whats in defaults.yaml

Beware, the osmap is currently not used and contains fillers. See defaults.yaml.
This is because OS-specific overrides are not currently looked after for /opt.
##}
{% set os_family_map = salt['grains.filter_by']({
        'Debian': {
            "sourceInstallPath" : '/opt/logstash/',
            'use_upstream_repo': True,
        },
        'Suse': {
            "sourceInstallPath" : '/opt/logstash/',
            'use_upstream_repo': True,
        },
        'Arch': {
            "sourceInstallPath" : '/opt/logstash/',
            'use_upstream_repo': True,
        },
        'RedHat': {
            "sourceInstallPath" : '/opt/logstash/',
            'use_upstream_repo': True,
        },
  }
  , grain="os_family"
  , merge=salt['pillar.get']('logstash:lookup'))
%}
{## Merge the flavor_map to the default settings ##}
{% do default_settings.logstash.update(os_family_map) %}

{%- set version = salt['pillar.get']('logstash:repoVersion', default_settings.logstash['repoVersion']) %}
{%- do default_settings.logstash.update(version_map[version]) %}

{## Merge in logstash:lookup pillar ##}
{% set logstash = salt['pillar.get'](
        'logstash',
        default=default_settings.logstash,
        merge=True
    )
%}

{%- macro output_indented(col, string) %}
{{ string|indent(col, true) -}}
{%- endmacro %}

{% macro format_logstash_config(plugin_type, plugin_array) %}
{%- set col = 0 %}
{{- output_indented(col, plugin_type + ' {') }}
{%- set col = col + logstash.indent %}
{%- for plugin in plugin_array %}
  {%- if plugin.cond is defined %}
    {{- output_indented(col, (plugin.cond + " {")) }}
  {%- endif %}
  {%- if plugin.continue is defined or plugin.cond is defined %}
    {%- set col = col + logstash.indent %}
  {%- endif %}
  {%- if plugin.plugin_name is defined %}
    {{- output_indented(col, (plugin.plugin_name + " {")) }}
  {% endif %}
  {%- set col = col + logstash.indent %}
  {%- for key, value in plugin.items() %}
    {%- if key == 'plugin_name' or key == 'cond' or key == 'continue' or key == 'endif' or key == 'endonly' %} {#pass#}
    {%- elif value is sameas False or value is sameas True %}
      {{- output_indented(col, (key + ' => ' + value|string|lower)) }}
    {%- elif value is string or value is number %}
      {{- output_indented(col, (key + ' => "' + value|string + '"')) }}
    {%- elif value is mapping %}
      {{- output_indented(col, (key + ' => {')) }}
      {%- set col = col + logstash.indent %}
      {%- for attr_key, attr_value in value.items() %}
        {{- output_indented(col, (attr_key + ' => "' + attr_value + '"')) }}
      {%- endfor %}
      {%- set col = col - logstash.indent %}
      {{- output_indented(col, '}') }}
    {%- elif value is iterable %}
      {{- output_indented(col, key + ' => [') }}
      {%- set col = col + logstash.indent %}
      {%- for item in value %}
        {{- output_indented(col, '"' + item + '"') }}{%- if loop.last == false %},{%- endif -%}
      {%- endfor %}
      {%- set col = col - logstash.indent %}
      {{- output_indented(col, ']') }}
    {%- endif %}
  {%- endfor %}
  {%- set col = col - logstash.indent %}
  {%- if plugin.plugin_name is defined %}
    {{- output_indented(col, '}') }}
  {% endif %}
  {%- if (plugin.cond is defined and plugin.continue is not defined) or plugin.endif is defined or plugin.endonly is defined %}
    {%- set col = col - logstash.indent %}
    {{- output_indented(col, '}') }}
  {%- endif %}
  {%- endfor %}
}
{%- endmacro %}
